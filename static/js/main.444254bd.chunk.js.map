{"version":3,"sources":["Components/GitInfo.js","App.js","serviceWorker.js","index.js"],"names":["GitInfo","props","react_default","a","createElement","className","src","avatar_url","alt","login","bio","href","html_url","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","active","handleEvent","bind","assertThisInitialized","event","_this2","setState","fetch","then","res","json","userInfo","GitInfo_GitInfo","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAGe,SAASA,EAAQC,GAC9B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,WAAYC,IAAI,oBAChCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,OAEXP,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,KACXR,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,KAAGO,KAAMV,EAAMW,UAAWX,EAAMW,kBC+DlCC,cAtEb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KAEDoB,MAAQ,CACXC,KAAM,GACNC,QAAQ,GAGVT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARFA,2EAWPa,GAAO,IAAAC,EAAAX,KACZA,KAAKI,MAAME,OAKdN,KAAKY,SAAS,CAAEN,QAAQ,IAJxBO,MAAM,wCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAQ,OAAIN,EAAKC,SAAS,CAAEP,KAAMY,EAAUX,QAAQ,uCAO9D,IAAID,EAAO,KAYX,OAXIL,KAAKI,MAAME,SACbD,EACEpB,EAAAC,EAAAC,cAAC+B,EAAD,CACE5B,WAAYU,KAAKI,MAAMC,KAAKf,WAC5BE,MAAOQ,KAAKI,MAAMC,KAAKb,MACvBC,IAAKO,KAAKI,MAAMC,KAAKZ,IAErBE,SAAUK,KAAKI,MAAMC,KAAKV,YAK9BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UAAQgC,QAASnB,KAAKO,YAAanB,UAAU,eAC1CY,KAAKI,MAAME,OAAS,YAAc,aAEpCD,UAxCSe,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.444254bd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GitInfo.css\";\n\nexport default function GitInfo(props) {\n  return (\n    <div>\n      <div className=\"user_display\">\n        <img src={props.avatar_url} alt=\"abstract marker\" />\n        <div className=\"user_text_info\">\n          <h2>{props.login}</h2>\n          {/* <p>Type: {props.type}</p> */}\n          <h3>{props.bio}</h3>\n          <p>\n            URL: <a href={props.html_url}>{props.html_url}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GitInfo from \"./Components/GitInfo\";\nimport { Button } from \"semantic-ui-react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {},\n      active: false\n    };\n\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  handleEvent(event) {\n    if (!this.state.active) {\n      fetch(\"https://api.github.com/users/jomorro\")\n        .then(res => res.json())\n        .then(userInfo => this.setState({ user: userInfo, active: true }));\n    } else {\n      this.setState({ active: false });\n    }\n  }\n\n  render() {\n    let user = null;\n    if (this.state.active) {\n      user = (\n        <GitInfo\n          avatar_url={this.state.user.avatar_url}\n          login={this.state.user.login}\n          bio={this.state.user.bio}\n          /*type={this.state.user.type}*/\n          html_url={this.state.user.html_url}\n        />\n      );\n    }\n    return (\n      <div className=\"user_and_button\">\n        <button onClick={this.handleEvent} className=\"user_button\">\n          {this.state.active ? \"Hide User\" : \"Show User\"}\n        </button>\n        {user}\n      </div>\n    );\n  }\n}\n\n/*Semantic ui toggle button\n\nimport React, { Component } from 'react'\nimport { Button } from 'semantic-ui-react'\n\nclass ButtonExampleToggle extends Component {\n  state = {}\n\n  handleClick = () => this.setState({ active: !this.state.active })\n\n  render() {\n    const { active } = this.state\n\n    return (\n      <Button toggle active={active} onClick={this.handleClick}>\n        Toggle\n      </Button>\n    )\n  }\n}\n\nexport default ButtonExampleToggle\n\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}